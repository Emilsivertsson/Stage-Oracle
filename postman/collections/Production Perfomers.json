{
	"info": {
		"_postman_id": "6944cab7-9ede-4d55-840c-6bc7460b8d49",
		"name": "Production Perfomers",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "27137666-6944cab7-9ede-4d55-840c-6bc7460b8d49"
	},
	"item": [
		{
			"name": "Get Performer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af1ccccc-ab62-41b2-b9ca-f10a99f3138d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "87c4b1ca-ac24-4032-8863-ab13418373c5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidXNlciIsImV4cCI6MTcxMzM1NTQ3MSwiaWF0IjoxNzEzMjY5MDcxLCJyb2xlcyI6IlVTRVIifQ.mkjtYQwa9CekGq-NBKC9ZUhe_XWPR8ND0DCsVZQPCO-aulncgAE2dcdsjKfMfs6zC6qYe5AcML6-iy5wn0PBIh4r_oLAOx_ZyflSy6Go_t8RSJSbHiTTM57n79WhHF_awXuScZdTacHfKgZmLEK34K90j1hTpE-K1ZC8QRHXwslOKl9H9RchB_5S3fbQfBYjOwsupInoFDCTkvyCwY3oCIJA0GD1emlHThlC-O81NHGHdHi3ftqfg9H13SqdR8PZXoQx5p3-z2a-hfCOfdz8ENASZ0d9u8-hjDqdN6I-IWD9KwQLq5xur8_2Qm_nM-m5S8lLIeNVQoijWA59NuwQCQ",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{8081}}/production-api/performers/2",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"performers",
						"2"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get all Performers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "090a2d72-9c49-4813-960e-38c7f9fcf303",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f862bb0b-f89a-4322-9908-3f180f4935ee",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidXNlciIsImV4cCI6MTcxNDA0ODY3NywiaWF0IjoxNzEzOTYyMjc3LCJyb2xlcyI6IlVTRVIifQ.q6dRVfuv3_7HyqG0VQBN76a7JMZZ5N6keIv7wOh-Qx-fYvPBIuUzRgib-HTgQBSCm0QSf5mjdFqH7an4JlVugLxioR_c4g871rD3qpM4RHvMXTT1FbHDB8PN4BU--WuiPFwpAsGv4xC8pk6i1yBl3xoQLikQw2MWG8aSHpc7wuoMXJcbSrhxoA80oG-MTmQtUZjO-VaZAHF5gfpJEHB3Z1MS7PsIEyKMJ2Jw3mvJwK39Umf8PxIwO8yrEmjKJPs8cPVXoFP_hQ-fNAFXNxizho3fYm6CDTDdq9L82AxYe4ALHFRCHUFcBj-q-cP8GXP2DTg7HwKO6S3A4dEXTrRUAQ",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{8081}}/production-api/performers/cast/2",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"performers",
						"cast",
						"2"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get all Performers from registry",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2d479f91-bcc9-41a3-885b-69ec205917c9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8fec35ab-4070-4255-92eb-7244fab7cc6e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidXNlciIsImV4cCI6MTcxNDE1NDk5MSwiaWF0IjoxNzE0MDY4NTkxLCJyb2xlcyI6IlVTRVIifQ.J08GoIKtRS_V_8uGcQUs2Plio4zAWY3kBCBjXNdfE3ZsjvMRY0PRHu9mt842adghjGtWko0yjYAuWt-CN7yK3npVT4Dyk9MT0176OrKel8sirmOVfb_Pa47hhqbTcQ1xsa_QhbhA7fpJCnrUmsKHnzAAM9TVMW3jUTI45EOKcslA43P4rYFmqFojcY4xSYqsGdwNvuU6kGsv_0R0_45XaJDLTIQn5RiQNOTNiB61mMBt0mC35bfqxn7_8GpTQIZGk2X1IP8xdBYmhvQ85P0-DSKSAAHv2Bh02RKbijBWHej9Eb7D5f-IoSdGKj-BvgscLnBKTBuM_UD4iNjtyx7eng",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/performers/registry/1",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"performers",
						"registry",
						"1"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create Performer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "99dab2b5-c8a1-4f4e-8b9b-20e38b2f4ddd",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "b2176dd5-7db0-4428-8d41-f6b03891509c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidXNlciIsImV4cCI6MTcxNDE1NDk5MSwiaWF0IjoxNzE0MDY4NTkxLCJyb2xlcyI6IlVTRVIifQ.J08GoIKtRS_V_8uGcQUs2Plio4zAWY3kBCBjXNdfE3ZsjvMRY0PRHu9mt842adghjGtWko0yjYAuWt-CN7yK3npVT4Dyk9MT0176OrKel8sirmOVfb_Pa47hhqbTcQ1xsa_QhbhA7fpJCnrUmsKHnzAAM9TVMW3jUTI45EOKcslA43P4rYFmqFojcY4xSYqsGdwNvuU6kGsv_0R0_45XaJDLTIQn5RiQNOTNiB61mMBt0mC35bfqxn7_8GpTQIZGk2X1IP8xdBYmhvQ85P0-DSKSAAHv2Bh02RKbijBWHej9Eb7D5f-IoSdGKj-BvgscLnBKTBuM_UD4iNjtyx7eng",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"performerId\": 2,\n    \"username\": \"user\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/performers/2",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"performers",
						"2"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Performer ((might not use)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09be5b53-02ad-4925-be06-19223831c741",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8e1189ca-a730-410c-8bae-a0ee27032705",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UserToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/performers",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"performers"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Performer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "82937644-616a-4299-92b3-15082c422111",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "77c15ea3-0059-488f-830a-eebbca79f958",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UserToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/performers/3",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"performers",
						"3"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "cf4bbcc1-cbd6-4c0b-80be-edae3d815bd0"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "a6211e19-6f01-4f03-94e2-114239646a4b"
			}
		}
	],
	"variable": [
		{
			"id": "901886db-e0c6-4912-80ac-de4818be2d1a",
			"key": "id",
			"value": "1"
		},
		{
			"id": "3adbc346-2d7c-4787-abf4-02dd42e5a62b",
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}