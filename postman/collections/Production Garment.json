{
	"info": {
		"_postman_id": "a93d2567-ed53-4f9b-8864-745ac1905025",
		"name": "Production Garment",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "27137666-a93d2567-ed53-4f9b-8864-745ac1905025"
	},
	"item": [
		{
			"name": "Get one Garment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5c07830-2ee0-483e-8718-a3ea083ae43c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "0d882318-292e-42ba-8eea-14f7b24b66df",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UserToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{8081}}/production-api/garments/2",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"garments",
						"2"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get all Garments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43c74857-03e5-4ace-bc83-31f00934cb3a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "ecc67665-9ff4-4d3a-8a83-25c6f0e6b86c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidXNlciIsImV4cCI6MTcxNDA3MDI0MywiaWF0IjoxNzEzOTgzODQzLCJyb2xlcyI6IlVTRVIifQ.JLbHHYEjLLe2Xu6AR_0CTwmOc_ZW8P48mx-PdDm4rSihgaPz8OABgveYZexddeVhfQwlSP3N0tO-Noh3ZmuqFRZm7jGVy_u9dg4K7ExXvaNOhcG1yyyNjVex2NQqe4hPp_eB6slSgbORw67YEXqtyjLhNpwg262fcfe_fRiomasUCNs8NjC9AMUfM06MME_xV7wZFY9q01lIWwrN_g_eHOkZjRSg_EA7754AI9qRSBlBJfZ2QaCpzB66ugh6VsxnVokmis9-WpCIT7gN3bEjnL-Gdk5v-81C_YIOoroOHo5JvnMNeT-TDgWE74HldvXkseaNiWhUjumwXccCSGy3eg",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{8081}}/production-api/garments/costume/2",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"garments",
						"costume",
						"2"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create Garment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e8bed058-c3a5-4d93-91d7-f44806efd355",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "1f29773e-52c3-4ff1-978c-1e330ddad811",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidXNlciIsImV4cCI6MTcxNDA3MDM0MCwiaWF0IjoxNzEzOTgzOTQwLCJyb2xlcyI6IlVTRVIifQ.s0OEoOAdTNMK37yfMmeK1qq_fFUsryBBM578MNxICfl9KzMXPCpXIT7Nw6qXJ9eP7unTucBeCkaFPS4pSBGkK94RrMTCkgBgd9PgVyXJauGtK_db5odIaU5DZWIV1l3zwwHSgxHmu0-b1swjudsC10fzdq_Au7Ae9bCl4VSVxPa9LIuQz81yX_XIfVlOta6gvESord4sIklW4Uo-ezXR3DDrvQaQiBWen-eCHa1mMWoTkZYyZHEiYok7vXApEk_y5GJFzA4raQe61RHa7u0WYlNkVWHk_I2cQ6Uk9VHwZ7uPwk-40_TlZFGTeV3RIJwV_L2EvAh0JUp_vXgql5CYDg",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Creating a Garment Test\",\n    \"description\": \"description for test\",\n    \"isDone\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/garments/2",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"garments",
						"2"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update Garment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "84a346c7-855a-4636-ae49-52d3f4830524",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "00815ffa-6302-4c13-b6f8-db53a2c7ea72",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UserToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"updating a Garment Test\",\n    \"description\": \"description for updated test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/garments/3",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"garments",
						"3"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Garment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "671358a0-3d5a-459f-a23c-dd9d90580374",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9a3d1476-e9c1-48cd-ba7b-c6349851dd89",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UserToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/garments/3",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"garments",
						"3"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "23b66c67-9a9f-4373-be93-04378edc1523"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "3f66b3e9-30b0-46cd-bb94-b3b0b8b30d91"
			}
		}
	],
	"variable": [
		{
			"id": "4eda270a-2bb5-4b71-b674-ddd5716c0989",
			"key": "id",
			"value": "1"
		},
		{
			"id": "de015fa1-5aab-4693-b63c-d05285389e7c",
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}