{
	"info": {
		"_postman_id": "46981aa8-e376-4184-bd2c-0a91e020c612",
		"name": "Production Prod",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "27137666-46981aa8-e376-4184-bd2c-0a91e020c612"
	},
	"item": [
		{
			"name": "Get all productions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b0ba137a-a3ca-4987-925d-a654162daafb",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7e40ba45-5dad-427a-8c51-13a876271fa0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidXNlciIsImV4cCI6MTcxNDA2ODg5MSwiaWF0IjoxNzEzOTgyNDkxLCJyb2xlcyI6IlVTRVIifQ.k9ueBu2ZBOcWV_FfcaFWjBd8uYL_o5smBzw7pSH6QAoHdY4MeH4qAazm0WbkaGRvTpvNZA7C5eELCljRQBBaCOC7x3QWOp4GWJ-TlJ5gHhFYmKkn5LMWcyQEIVU-5-eWExI4mhP9q-9C8IM8tEW1Bl4HD5yI8jyHOM1tZYGmhBxHefOsthMKj-Ws1OiyPnVdDVXKRZFUiripUBpPodT3RpCjemyz5g-MgqPvyEP6XqR045DVfJCGeVtzqN2bMrcLe5LtPSXhM-JyEzG6HtXzIqKihCzg1CmC3FratTx5UenOhqceLD9oPrblPZRePk5xsAiMhPG1x-TKbqmu1SxD3w",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{8081}}/production-api/productions",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"productions"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get one production",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e45eef9e-2bf4-4c39-84a2-a7cde66a7dcc",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "8826cc6f-e71e-4796-8d2d-59353f226dfc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UserToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{8081}}/production-api/productions/2",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"productions",
						"2"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "create a production",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "98650e58-3232-45ee-a592-c57cda58b1e3",
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "b50b8101-9b40-418e-8dcd-b54701ddb246",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoidXNlciIsImV4cCI6MTcxMzM0MDY5NSwiaWF0IjoxNzEzMjU0Mjk1LCJyb2xlcyI6IlVTRVIifQ.AGYAYALOI6KFwoRn3YD04CoCjOrQlMTsOksqmTxTbtIDdEHVcMYMG06KewgTsZSUIhH9H-4m-b7RZuZJ81HzhlNuqTUMmnNbu9Ur3-GVjzygMW-tmm7xrYI5SjnezU_faYvIfX-DBBleGp4_xdGPlIJ1DWNgySSuN2LoERHuP93UmHxb5gbHSthVz4VGbzI0Sh0Le82eLKHoxI1sHTZD4UkrRdqWR75ucOuafljxZy_xcFkYe0IZICpNUkwOzedzJMG5XjkDgByKd0xDcH3xLPDn0I4jw92cYpxnhyarp-czaA7s8eyIbYY-huzulXpjxMHSiFdVS6bIFF4n8wm4VQ",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"title\": \"Creating Production test\",\n    \"year\": 2005,\n    \"inRotation\": true,\n    \"description\": \"description for test-Production\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/productions",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"productions"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update production",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8bebc142-fbcb-497e-91b0-d4a1e0778521",
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "15b72c70-7c2f-4298-82dc-6d45dd6de81f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UserToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"title\": \"Updating Production test\",\n    \"year\": 2008,\n    \"inRotation\": false,\n    \"description\": \"Updateing description for test-Production\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/productions/2",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"productions",
						"2"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete production",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "96b1b937-fb83-47a6-91c3-460990c78107",
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "5c0afbeb-1083-4a42-af2d-66ed6b1f0e64",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{UserToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{8081}}/production-api/productions/3",
					"host": [
						"{{8081}}"
					],
					"path": [
						"production-api",
						"productions",
						"3"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e788d9d3-b0b2-4351-8d24-d121cd24c475",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "189df37d-34de-4858-9645-91622d0419ff",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "87d54f1a-ecd4-4f56-ae1f-882590224954",
			"key": "id",
			"value": "1"
		},
		{
			"id": "8293a701-6fd6-4677-b4c8-42f4fb221df9",
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}